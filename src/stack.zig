const std = @import("std");
const Opcode = @import("opcodes.zig").Opcode;
const InstructionFunc = *const fn (pc: u32, code: [*]const Instruction, stack: *Stack) anyerror!void;
const readPush = @import("push.zig").readPushData;

pub const StackValue = struct {
    bytes: []u8,
};

const Stack = std.BoundedArray(StackValue, 10_000);

const InstructionFuncs = struct {
    const opcodeToFuncTable = [_]InstructionFunc{
        // &op_0,
        // &op_pushbytes_1,
        // &op_pushbytes_2,
        // &op_pushbytes_3,
        // &op_pushbytes_4,
        // &op_pushbytes_5,
        // &op_pushbytes_6,
        // &op_pushbytes_7,
        // &op_pushbytes_8,
        // &op_pushbytes_9,
        // &op_pushbytes_10,
        // &op_pushbytes_11,
        // &op_pushbytes_12,
        // &op_pushbytes_13,
        // &op_pushbytes_14,
        // &op_pushbytes_15,
        // &op_pushbytes_16,
        // &op_pushbytes_17,
        // &op_pushbytes_18,
        // &op_pushbytes_19,
        // &op_pushbytes_20,
        // &op_pushbytes_21,
        // &op_pushbytes_22,
        // &op_pushbytes_23,
        // &op_pushbytes_24,
        // &op_pushbytes_25,
        // &op_pushbytes_26,
        // &op_pushbytes_27,
        // &op_pushbytes_28,
        // &op_pushbytes_29,
        // &op_pushbytes_30,
        // &op_pushbytes_31,
        // &op_pushbytes_32,
        // &op_pushbytes_33,
        // &op_pushbytes_34,
        // &op_pushbytes_35,
        // &op_pushbytes_36,
        // &op_pushbytes_37,
        // &op_pushbytes_38,
        // &op_pushbytes_39,
        // &op_pushbytes_40,
        // &op_pushbytes_41,
        // &op_pushbytes_42,
        // &op_pushbytes_43,
        // &op_pushbytes_44,
        // &op_pushbytes_45,
        // &op_pushbytes_46,
        // &op_pushbytes_47,
        // &op_pushbytes_48,
        // &op_pushbytes_49,
        // &op_pushbytes_50,
        // &op_pushbytes_51,
        // &op_pushbytes_52,
        // &op_pushbytes_53,
        // &op_pushbytes_54,
        // &op_pushbytes_55,
        // &op_pushbytes_56,
        // &op_pushbytes_57,
        // &op_pushbytes_58,
        // &op_pushbytes_59,
        // &op_pushbytes_60,
        // &op_pushbytes_61,
        // &op_pushbytes_62,
        // &op_pushbytes_63,
        // &op_pushbytes_64,
        // &op_pushbytes_65,
        // &op_pushbytes_66,
        // &op_pushbytes_67,
        // &op_pushbytes_68,
        // &op_pushbytes_69,
        // &op_pushbytes_70,
        // &op_pushbytes_71,
        // &op_pushbytes_72,
        // &op_pushbytes_73,
        // &op_pushbytes_74,
        // &op_pushbytes_75,
        // &op_pushdata_1,
        // &op_pushdata_2,
        // &op_pushdata_4,
        // &op_1negate,
        // &op_reserved,
        // &op_1,
        // &op_2,
        // &op_3,
        // &op_4,
        // &op_5,
        // &op_6,
        // &op_7,
        // &op_8,
        // &op_9,
        // &op_10,
        // &op_11,
        // &op_12,
        // &op_13,
        // &op_14,
        // &op_15,
        // &op_16,
        // &op_nop,
        // &op_ver,
        // &op_if,
        // &op_notif,
        // &op_verif,
        // &op_vernotif,
        // &op_else,
        // &op_endif,
        // &op_verify,
        // &op_return,
        // &op_toaltstack,
        // &op_fromaltstack,
        // &op_2drop,
        // &op_2dup,
        // &op_3dup,
        // &op_2over,
        // &op_2rot,
        // &op_2swap,
        // &op_ifdup,
        // &op_depth,
        // &op_drop,
        // &op_dup,
        // &op_nip,
        // &op_over,
        // &op_pick,
        // &op_roll,
        // &op_rot,
        // &op_swap,
        // &op_tuck,
        // &op_cat,
        // &op_split,
        // &op_num2bin,
        // &op_bin2num,
        // &op_size,
        // &op_invert,
        // &op_and,
        // &op_or,
        // &op_xor,
        // &op_equal,
        // &op_equalverify,
        // &op_reserved1,
        // &op_reserved2,
        // &op_1add,
        // &op_1sub,
        // &op_2mul,
        // &op_2div,
        // &op_negate,
        // &op_abs,
        // &op_not,
        // &op_0notequal,
        &op_add,
        // &op_sub,
        // &op_mul,
        // &op_div,
        // &op_mod,
        // &op_lshift,
        // &op_rshift,
        // &op_booland,
        // &op_boolor,
        // &op_numequal,
        // &op_numequalverify,
        // &op_numnotequal,
        // &op_lessthan,
        // &op_greaterthan,
        // &op_lessthanorequal,
        // &op_greaterthanorequal,
        // &op_min,
        // &op_max,
        // &op_within,
        // &op_ripemd160,
        // &op_sha1,
        // &op_sha256,
        // &op_hash160,
        // &op_hash256,
        // &op_codeseparator,
        // &op_checksig,
        // &op_checksigverify,
        // &op_checkmultisig,
        // &op_checkmultisigverify,
        // &op_nop1,
        // &op_checklocktimeverify,
        // &op_checksequenceverify,
        // &op_nop4,
        // &op_nop5,
        // &op_nop6,
        // &op_nop7,
        // &op_nop8,
        // &op_nop9,
        // &op_nop10,
        // &op_checkdatasig,
        // &op_checkdatasigverify,
        // &op_reversebytes,
        // // * First CODEPOINT left undefined before nullary introspection operations.
        // &op_unknown189,
        // &op_unknown190,
        // // * Last CODEPOINT left undefined before nullary introspection operations.
        // &op_unknown191,
        // &op_inputindex,
        // &op_activebytecode,
        // &op_txversion,
        // &op_txinputcount,
        // &op_txoutputcount,
        // &op_txlocktime,
        // &op_utxovalue,
        // &op_utxobytecode,
        // &op_outpointtxhash,
        // &op_outpointindex,
        // &op_inputbytecode,
        // &op_inputsequencenumber,
        // &op_outputvalue,
        // &op_outputbytecode,
        // &op_utxotokencategory,
        // &op_utxotokencommitment,
        // &op_utxotokenamount,
        // &op_outputtokencategory,
        // &op_outputtokencommitment,
        // &op_outputtokenamount,
        // &op_unknown212,
        // &op_unknown213,
        // &op_unknown214,
        // &op_unknown215,
        // &op_unknown216,
        // &op_unknown217,
        // &op_unknown218,
        // &op_unknown219,
        // &op_unknown220,
        // &op_unknown221,
        // &op_unknown222,
        // &op_unknown223,
        // &op_unknown224,
        // &op_unknown225,
        // &op_unknown226,
        // &op_unknown227,
        // &op_unknown228,
        // &op_unknown229,
        // &op_unknown230,
        // &op_unknown231,
        // &op_unknown232,
        // &op_unknown233,
        // &op_unknown234,
        // &op_unknown235,
        // &op_unknown236,
        // &op_unknown237,
        // &op_unknown238,
        // &op_unknown239,
        // * A.K.A. `OP_PREFIX_BE
        // &op_unknown240,
        // &op_unknown241,
        // &op_unknown242,
        // &op_unknown243,
        // &op_unknown244,
        // &op_unknown245,
        // &op_unknown246,
        // &op_unknown247,
        // &op_unknown248,
        // &op_unknown249,
        // &op_unknown250,
        // &op_unknown251,
        // &op_unknown252,
        // &op_unknown253,
        // &op_unknown254,
        // &op_unknown255,
    };
    fn run(pc: u32, code: [*]const Instruction, stack: *Stack) anyerror!void {
        try @call(.always_tail, InstructionFuncs.lookup(code[pc].opcode), .{ pc, code, stack });
    }

    fn lookup(opcode: Opcode) InstructionFunc {
        return opcodeToFuncTable[@intFromEnum(opcode)];
    }
    fn op_add(pc: u32, code: [*]const Instruction, stack: *Stack) anyerror!void {
        const item_lhs = stack.get(stack.len - 2);
        const item_rhs = stack.get(stack.len - 1);
        const res = item_lhs + item_rhs;
        _ = code;
        pc += 1;
        std.debug.print("OP_ADD", .{res});
    }
    // fn push_op(pc: u32, code: [*]const Instruction, stack: *Stack) !void {
    // const push_val = c
    // }
};

pub const Instruction = struct {
    opcode: Opcode,
};
